<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="   
   http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.1.xsd   
   http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.1.xsd   
   http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.1.xsd   
 http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.1.xsd    
 "
	>
<!--  default-lazy-init="true" -->
	<description>Spring公共配置</description>

	<!-- 定义受环境影响易变的变量 -->
	<bean class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="systemPropertiesModeName" value="SYSTEM_PROPERTIES_MODE_OVERRIDE" />
		<property name="ignoreResourceNotFound" value="true" />
		<property name="locations">
			<list>
				<value>classpath:*.properties</value>
				<value>classpath:spring/*.properties</value>
			</list>
		</property>
	</bean>
	
	<!-- 使用annotation 自动注册bean,并保证@Required,@Autowired的属性被注入 -->
	<context:component-scan base-package="*" />
	
<!-- 	<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close"> -->
<!-- 		<property name="driverClassName" value="${hibernate.connection.driver_class}" /> -->
<!-- 		<property name="url" value="${hibernate.connection.url}" /> -->
<!-- 		<property name="username" value="${hibernate.connection.username}" /> -->
<!-- 		<property name="password" value="${hibernate.connection.password}" /> -->
<!-- 	</bean> -->
	<bean id="dataSource1" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
		<property name="driverClassName" value="${hibernate.connection.driver_class}" />
<!-- 		<property name="url" value="jdbc:mysql://127.0.0.1:3306/mytest1?useUnicode=true&amp;characterEncoding=utf-8" /> -->
		<property name="url" value="jdbc:sqlserver://localhost;database=mytest1" />
		<property name="username" value="${hibernate.connection.username}" />
		<property name="password" value="${hibernate.connection.password}" />
	</bean>
	<bean id="dataSource2" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
		<property name="driverClassName" value="${hibernate.connection.driver_class}" />
<!-- 		<property name="url" value="jdbc:mysql://127.0.0.1:3306/mytest2?useUnicode=true&amp;characterEncoding=utf-8" /> -->
		<property name="url" value="jdbc:sqlserver://localhost;database=mytest2" />
		<property name="username" value="${hibernate.connection.username}" />
		<property name="password" value="${hibernate.connection.password}" />
	</bean>
	<bean id="dataSource3" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
		<property name="driverClassName" value="${hibernate.connection.driver_class}" />
<!-- 		<property name="url" value="jdbc:mysql://127.0.0.1:3306/mytest3?useUnicode=true&amp;characterEncoding=utf-8" /> -->
		<property name="url" value="jdbc:sqlserver://localhost;database=mytest3" />
		<property name="username" value="${hibernate.connection.username}" />
		<property name="password" value="${hibernate.connection.password}" />
	</bean>

	<bean id="dataSource" class="com.hzth.myapp.spring.MyAbstractRoutingDataSource">
	   <property name="targetDataSources">
	      <map key-type="java.lang.String">
	         <entry key="user1" value-ref="dataSource1"/>
	         <entry key="user2" value-ref="dataSource2"/>
	         <entry key="user3" value-ref="dataSource3"/>
	      </map>
	   </property>
	   <property name="defaultTargetDataSource" ref="dataSource1"/>
	</bean>

	<!-- Hibernate SessionFactory -->
	<bean id="sessionFactory" class="org.springframework.orm.hibernate4.LocalSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
<!--		<property name=""></property>-->
		<property name="mappingDirectoryLocations">
			<list>
				<value>classpath:com/hzth/myapp/*/model/</value>
			</list>
		</property>
		<property name="configLocations">
			<list>
			</list>
		</property>
		<property name="packagesToScan">
			<list>
				<value>com/hzth/myapp/user/model</value>
				<value>com/hzth/myapp/leave/model</value>
			</list>
		</property>
<!--		<property name="configurationClass">-->
<!--			<value>org.hibernate.cfg.AnnotationConfiguration</value>-->
<!--		</property>-->

		<property name="hibernateProperties">
			<props>
				<prop key="hibernate.dialect">${hibernate.dialect}</prop>
				<prop key="hibernate.show_sql">${hibernate.show_sql}</prop>
				<prop key="hibernate.format_sql">${hibernate.format_sql}</prop>
				<prop key="hibernate.hbm2ddl.auto">${hibernate.hbm2ddl.auto}</prop>
				<prop key="hibernate.max_fetch_depth">${hibernate.max_fetch_depth}</prop>
				<prop key="hibernate.jdbc.batch_size">${hibernate.jdbc.batch_size}</prop>
				<!-- 二级缓存 -->
				<prop key="hibernate.cache.provider_class">${hibernate.cache.provider_class}</prop>
				<prop key="hibernate.cache.use_second_level_cache">${hibernate.cache.use_second_level_cache}</prop>
				<prop key="hibernate.cache.use_query_cache">${hibernate.cache.use_query_cache}</prop>
			</props>
		</property>

	</bean>
	
<!--	<bean id="jdbcTemplate" class="org.springframework.jdbc.core.simple.SimpleJdbcTemplate">-->
<!--		<constructor-arg index="0" ref="dataSource"></constructor-arg>-->
<!--	</bean>-->
	<bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
		<property name="dataSource"><ref bean="dataSource"/></property>
	</bean>
	<!-- 事务管理器配置,单数据源事务 -->
	<bean id="transactionManager" class="org.springframework.orm.hibernate4.HibernateTransactionManager">
		<property name="sessionFactory" ref="sessionFactory" />
		<property name="dataSource" ref="dataSource"/>
	</bean>

  <bean id="processEngineConfiguration" class="org.activiti.spring.SpringProcessEngineConfiguration">
    <property name="dataSource" ref="dataSource" />
    <property name="transactionManager" ref="transactionManager" />
    <property name="databaseSchemaUpdate" value="none" />
    <property name="jobExecutorActivate" value="false" />
    <property name="databaseType" value="mssql" />
    <property name="history" value="full" />
    <property name="idGenerator">
<!--     	<bean class="org.activiti.engine.impl.persistence.StrongUuidGenerator"></bean> -->
    	<bean class="com.hzth.myapp.leave.util.MyIdGenerator"></bean>
    </property>
    <property name="customFormTypes">
    	<list>
		    <bean class="com.hzth.myapp.leave.formType.FileFormType"></bean>
    	</list>
    </property>
  </bean>
  
  <bean id="processEngine" class="org.activiti.spring.ProcessEngineFactoryBean">
    <property name="processEngineConfiguration" ref="processEngineConfiguration" />
  </bean>
  
  <bean id="repositoryService" factory-bean="processEngine" factory-method="getRepositoryService" />
  <bean id="runtimeService" factory-bean="processEngine" factory-method="getRuntimeService" />
  <bean id="taskService" factory-bean="processEngine" factory-method="getTaskService" />
  <bean id="historyService" factory-bean="processEngine" factory-method="getHistoryService" />
  <bean id="managementService" factory-bean="processEngine" factory-method="getManagementService" />
  <bean id="formService" factory-bean="processEngine" factory-method="getFormService" />
  <bean id="identityService" factory-bean="processEngine" factory-method="getIdentityService" />
  
	<!-- 使用annotation定义事务 -->
  <tx:annotation-driven transaction-manager="transactionManager" proxy-target-class="true" />
<!--	<bean id="springContextHolder" class="com.hzth.core.spring.SpringContextHolder" lazy-init="false" />-->

  <bean id="performanceMonitor" class="org.springframework.aop.interceptor.PerformanceMonitorInterceptor" />
  <aop:config>
    <aop:pointcut id="allServiceMethods" expression="execution(* com.hzth.myapp.user.service.*.*(..))"/>
    <aop:advisor pointcut-ref="allServiceMethods" advice-ref="performanceMonitor" order="2"/>
  </aop:config>
  <bean id="springContextHolder" class="com.hzth.myapp.core.util.SpringContextHolder" lazy-init="false" />
  <bean id="threadStartInSpring" class="com.hzth.myapp.thread.ThreadStartInSpring" init-method="init" lazy-init="false"/>
</beans>
